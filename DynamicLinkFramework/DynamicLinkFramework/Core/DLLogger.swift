//
//  DLLogger.swift
//  Runner
//
//  Created by soyoongdev on 4/2/25.
//
import Foundation
import os.log

/// C√°c c·∫•p ƒë·ªô log
@objc public enum LogLevel: Int {
    case debug = 0
    case info
    case warning
    case error

    public var description: String {
        switch self {
        case .debug: return "üêû DEBUG"
        case .info: return "‚ÑπÔ∏è INFO"
        case .warning: return "‚ö†Ô∏è WARNING"
        case .error: return "‚ùå ERROR"
        }
    }
}

/// C·∫•u h√¨nh Logger
@objc public class DLLoggerConfig: NSObject {
    @objc public static var isLoggingEnabled: Bool = true  // B·∫≠t/T·∫Øt log console
    @objc public static var shouldLogToFile: Bool = true   // B·∫≠t/T·∫Øt log file
    @objc public static var shouldUseOSLog: Bool = true    // B·∫≠t/T·∫Øt OSLog
    @objc public static var shouldUseNSLog: Bool = true    // Ghi log v√†o NSLog
}

/// DLLogger - H·ªó tr·ª£ log theo nhi·ªÅu c·∫•p ƒë·ªô, l∆∞u log v√†o file n·∫øu c·∫ßn
@objc public class DLLogger: NSObject {
    
    /// Ghi log v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    @objc public static func log(_ message: String, level: LogLevel = .info, function: String = #function, file: String = #file, line: Int = #line) {
        let fileName = (file as NSString).lastPathComponent
        let logMessage = "[\(level.description)] \(fileName) -> \(function) [Line \(line)]: \(message)"
        
        // Ghi log v√†o console
        if DLLoggerConfig.isLoggingEnabled {
            print(logMessage)
        }
        
        // Ghi log v√†o NSLog
        if DLLoggerConfig.shouldUseNSLog {
            NSLog("%@", logMessage)
        }
        
        // Ghi log v√†o OSLog (ch·ªâ iOS 10+)
        if DLLoggerConfig.shouldUseOSLog {
            logToOSLog(message, level: level)
        }
        
        // Ghi log v√†o file
        if DLLoggerConfig.shouldLogToFile {
            logToFile(logMessage)
        }
    }
    
    /// Ghi log v√†o OSLog (Unified Logging System c·ªßa Apple)
    @available(iOS 10.0, *)
    private static func logToOSLog(_ message: String, level: LogLevel) {
        let osLogType: OSLogType
        switch level {
        case .debug: osLogType = .debug
        case .info: osLogType = .info
        case .warning: osLogType = .default
        case .error: osLogType = .error
        }
        
        let osLogger = OSLog(subsystem: Bundle.main.bundleIdentifier ?? "com.default.app", category: "DLLogger")
        os_log("%@", log: osLogger, type: osLogType, message)
    }
    
    /// Ghi log v√†o file trong th∆∞ m·ª•c Documents
    private static func logToFile(_ logMessage: String) {
        let fileManager = FileManager.default
        let logFilePath = getLogFilePath()
        
        if !fileManager.fileExists(atPath: logFilePath) {
            fileManager.createFile(atPath: logFilePath, contents: nil, attributes: nil)
        }
        
        guard let fileHandle = try? FileHandle(forWritingTo: URL(fileURLWithPath: logFilePath)) else { return }
        defer { fileHandle.closeFile() }
        
        fileHandle.seekToEndOfFile()
        if let data = ("\n" + logMessage).data(using: .utf8) {
            fileHandle.write(data)
        }
    }
    
    /// L·∫•y ƒë∆∞·ªùng d·∫´n file log trong th∆∞ m·ª•c Documents
    private static func getLogFilePath() -> String {
        let documentDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        return documentDirectory.appendingPathComponent("app_log.txt").path
    }
    
    /// X√≥a file log
    @objc public static func clearLogFile() {
        let fileManager = FileManager.default
        let logFilePath = getLogFilePath()
        
        do {
            if fileManager.fileExists(atPath: logFilePath) {
                try fileManager.removeItem(atPath: logFilePath)
                print("‚úÖ Log file cleared")
            }
        } catch {
            print("‚ùå Error clearing log file: \(error.localizedDescription)")
        }
    }
}
