//
//  DLDynamicLink.swift
//  Runner
//
//  Created by soyoongdev on 6/2/25.
//

import Foundation

// MARK: - Constants

public let kDLParameterDeepLinkIdentifier = "deepLinkIdentifier"
public let kDLParameterInviteId = "inviteId"
public let kDLParameterWeakMatchEndpoint = "weakMatchEndpoint"
public let kDLParameterMinimumAppVersion = "minimumAppVersion"
public let kDLParameterMatchType = "matchType"
public let kDLParameterMatchMessage = "matchMessage"


/// Class ƒë·∫°i di·ªán cho m·ªôt Dynamic Link ƒë∆∞·ª£c x·ª≠ l√Ω t·ª´ Universal Link ho·∫∑c Custom Scheme URL
@objc public class DLDynamicLink: NSObject {
  
  /// URL g·ªëc c·ªßa Dynamic Link
  public let originalURL: URL
  
  /// Host c·ªßa URL (n·∫øu c√≥)
  public let host: String?
  
  /// Path c·ªßa URL
  public let path: String
  
  /// C√°c tham s·ªë truy v·∫•n c·ªßa Dynamic Link
  public let parameters: [String: String]
  
  /// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng DLDynamicLink t·ª´ m·ªôt URL v√† c√°c th√¥ng tin li√™n quan
  init?(url: URL) {
    self.originalURL = url
    self.host = url.host
    self.path = url.path
    
    // Tr√≠ch xu·∫•t query parameters
    if let components = URLComponents(url: url, resolvingAgainstBaseURL: true),
       let queryItems = components.queryItems {
      self.parameters = Dictionary(uniqueKeysWithValues: queryItems.compactMap { item in
        guard let value = item.value else { return nil }
        return (item.name, value)
      })
    } else {
      self.parameters = [:]
    }
    
    // Log qu√° tr√¨nh kh·ªüi t·∫°o
    DLLogger.log("‚úÖ Created DLDynamicLink - URL: \(url.absoluteString)", level: .info)
    DLLogger.log("üîó Parameters: \(self.parameters)", level: .info)
  }
  
  /// Kh·ªüi t·∫°o t·ª´ c√°c th√†nh ph·∫ßn URL (c√≥ th·ªÉ s·ª≠ d·ª•ng khi x·ª≠ l√Ω universal link)
  init(url: URL, path: String, host: String?, parameters: [String: String]) {
    self.originalURL = url
    self.path = path
    self.host = host
    self.parameters = parameters
    
    DLLogger.log("‚úÖ Created DLDynamicLink (manual init) - URL: \(url.absoluteString)", level: .info)
    DLLogger.log("üîó Parameters: \(parameters)", level: .info)
  }
  
  /// Tr·∫£ v·ªÅ m√¥ t·∫£ c·ªßa ƒë·ªëi t∆∞·ª£ng
  public override var description: String {
    return "DLDynamicLink(URL: \(originalURL.absoluteString), Path: \(path), Parameters: \(parameters))"
  }
}
