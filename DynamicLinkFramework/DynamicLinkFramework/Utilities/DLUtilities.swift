//
//  DLUtilities.swift
//  mocha
//
//  Created by NGUYEN HAU on 14/2/25.
//  Copyright ¬© 2025 TTND. All rights reserved.
//

import Foundation

public let kDLParameterLink = "link"
public let kDLParameterCampaign = "utm_campaign"
public let kDLParameterContent = "utm_content"
public let kDLParameterMedium = "utm_medium"
public let kDLParameterSource = "utm_source"
public let kDLParameterTerm = "utm_term"

@objcMembers public class DLUtilities: NSObject {
    
    public static let shared = DLUtilities()
    
    public static var DLCustomDomains: Set<URL> = []
    
    public func urlQueryStringFromDictionary(_ dictionary: [String: String]) -> String {
        var parameters = ""
        let queryCharacterSet = CharacterSet.alphanumerics
        let parameterFormatString = "%@%@=%@"
        
        for (index, (key, value)) in dictionary.enumerated() {
            let delimiter = index == 0 ? "?" : "&"
            let encodedValue = value.addingPercentEncoding(withAllowedCharacters: queryCharacterSet) ?? ""
            let parameter = String(format: parameterFormatString, delimiter, key, encodedValue)
            parameters.append(parameter)
        }
        
        return parameters
    }
    
    public func dictionaryFromQuery(_ queryString: String?) -> [String: String] {
        guard let queryString = queryString else {
            return [:]
        }
        var queryDictionary: [String: String] = [:]
        let keyValuePairs = queryString.components(separatedBy: "&")
        for pair in keyValuePairs {
            let keyValuePair = pair.components(separatedBy: "=")
            if keyValuePair.count == 2 {
                let key = keyValuePair[0]
                let value = keyValuePair[1].removingPercentEncoding ?? ""
                queryDictionary[key] = value
            }
        }
        return queryDictionary as [String: String]
    }
    
    
    /// H√†m n√†y d√πng ƒë·ªÉ ki·ªÉm tra xem m·ªôt URL c√≥ thu·ªôc m·ªôt trong c√°c custom domain h·ª£p l·ªá hay kh√¥ng.
    /// Ngo√†i ra, n√≥ c√≤n ki·ªÉm tra xem URL c√≥ ch·ª©a ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá ho·∫∑c tham s·ªë query ‚Äúlink‚Äù tr·ªè ƒë·∫øn m·ªôt URL kh√°c.
    /// V√≠ d·ª•:
    /// H·ª£p l·ªá: "https://deeplink.algamestudio.com/game?id=2" || "https://sport.algamestudio.com/detail?id=2" || "https://deeplink.algamestudio.com/?link=https://example.com/page"
    /// Kh√¥ng h·ª£p l·ªá: "https://randomsite.com/game?id=2" (Kh√¥ng thu·ªôc danh s√°ch DLCustomDomains) || "https://deeplink.algamestudio.com/invalid" (Kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá ho·∫∑c query "link")
    /// - Parameter url: Deeplink (Vd: https://deeplink.algamestudio.com)
    /// - Returns: True n·∫øu h·ª£p l·ªá ho·∫∑c false n·∫øu kh√¥ng h·ª£p l·ªá
    public func isURLForAllowedCustomDomain(_ url: URL?) -> Bool {
        guard let url = url else {
            return false
        }
        for allowedCustomDomain in Self.DLCustomDomains {
            guard url.absoluteString.hasPrefix(allowedCustomDomain.absoluteString) else {
                continue
            }
            let urlWithoutPrefix = String(url.absoluteString.dropFirst(allowedCustomDomain.absoluteString.count))
            guard urlWithoutPrefix.hasPrefix("/") || urlWithoutPrefix.hasPrefix("?") else {
                continue
            }
            guard let components = URLComponents(string: urlWithoutPrefix) else {
                continue
            }
            if components.path.count > 1 {
                return true
            }
            if let queryItems = components.queryItems, queryItems.contains(where: {
                $0.name.caseInsensitiveCompare("link") == .orderedSame &&
                ($0.value?.hasPrefix("http://") == true || $0.value?.hasPrefix("https://") == true)
            }) {
                return true
            }
        }
        return false
    }
    
    /* We are validating following domains in proper format.
     * .algamestudio.com
     */
    public func isValidDLWithDomain(_ url: URL?) -> Bool {
        guard let url = url, let host = url.host else {
            return false
        }
        if host.contains(".algamestudio.com") {
            // Bi·ªÉu th·ª©c ch√≠nh quy ki·ªÉm tra domain h·ª£p l·ªá
            let regex = #"^https?:\/\/[a-zA-Z0-9.-]+(\/[a-zA-Z0-9-_\/]*)?(\?[a-zA-Z0-9_=&%-]*)?$"#
            if url.absoluteString.range(of: regex, options: .regularExpression) != nil {
                return true
            }
        }
        return false
    }
    
    /*
     DL can be parsed if it :
     1. Has http(s)://goo.gl/app* or http(s)://page.link/app* format
     2. OR http(s)://$DomainPrefix.page.link or http(s)://$DomainPrefix.app.goo.gl domain with specific
     format
     3. OR the domain is a listed custom domain
     */
    public func canParseUniversalLinkURL(_ url: URL?) -> Bool {
        guard let url = url, let host = url.host else {
            return false
        }
        // Danh s√°ch c√°c domain h·ª£p l·ªá cho Universal Links
        let allowedHosts = DLConfig.allowedHosts
        
        // Ki·ªÉm tra n·∫øu URL thu·ªôc m·ªôt trong c√°c host h·ª£p l·ªá
        let isValidHost = allowedHosts.contains { allowedHost in
            host == allowedHost || host.hasSuffix(allowedHost)
        }
        // Ki·ªÉm tra xem path c√≥ h·ª£p l·ªá kh√¥ng (ph·∫£i c√≥ n·ªôi dung sau "/")
        let isValidPath = !url.path.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
        
        if isValidHost && isValidPath {
            return true
        }
        // Ki·ªÉm tra URL theo c√°c ph∆∞∆°ng th·ª©c ki·ªÉm tra b·ªï sung
        let isValidCustomDomain = self.isValidDLWithDomain(url) || self.isURLForAllowedCustomDomain(url)
        if isValidCustomDomain {
            return true
        }
        return false
    }
    
    public func matchesShortLinkFormat(_ url: URL) -> Bool {
        // Short Durable Link URLs ph·∫£i c√≥ path ho·∫∑c thu·ªôc m·ªôt custom domain h·ª£p l·ªá.
        let hasPathOrCustomDomain = !url.path.isEmpty || self.isURLForAllowedCustomDomain(url)
        // Ki·ªÉm tra n·∫øu URL c√≥ th·ªÉ ƒë∆∞·ª£c parse nh∆∞ m·ªôt Universal Link h·ª£p l·ªá.
        let canParse = self.canParseUniversalLinkURL(url)
        // Path kh√¥ng ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu b·∫±ng "/link/dismiss".
        let isDismiss = url.path.lowercased().hasPrefix("/link/dismiss")
        // Ki·ªÉm tra n·∫øu path ch·ªâ ch·ª©a m·ªôt ph·∫ßn t·ª≠ sau domain (VD: "/xyz")
        let regexPattern = #"^\/[^\/]+$"#
        let matchesShortLinkFormat = url.path.range(of: regexPattern, options: .regularExpression) != nil
        let result = hasPathOrCustomDomain && !isDismiss && canParse && matchesShortLinkFormat
        return result
    }
    
    public func addToAllowListForCustomDomainsArray(_ customDomains: [String]) {
        // Duplicates will be weeded out when converting to a set.
        var validCustomDomains = [URL]()
        
        for customDomainEntry in customDomains {
            // We remove trailing slashes in the path if present.
            let domainEntry = customDomainEntry.hasSuffix("/") ?
            String(customDomainEntry.dropLast()) : customDomainEntry
            
            if let customDomainURL = URL(string: domainEntry), customDomainURL.scheme != nil {
                validCustomDomains.append(customDomainURL)
            }
        }
        
        // Duplicates will be weeded out when converting to a set.
        Self.DLCustomDomains = Set(validCustomDomains)
    }
    
    /// H√†m ki·ªÉm tra first open hay reopen (ƒëi·ªÅu ki·ªán reopen l√† khi app ƒë∆∞·ª£c m·ªü l·∫°i sau khi ƒë√£ ƒë∆∞·ª£c ƒë√≥ng ho√†n). L∆∞u key l√† urlString v√† s·ªë l·∫ßn m·ªü deeplink v√†o UserDefaults.
    public func checkForDeepLinkAfterLaunch(_ url: URL) {
        // L·∫•y danh s√°ch deeplink ƒë√£ m·ªü t·ª´ UserDefaults
        var listDeepLinks = (DLUserDefaultHelper.shared.getDictionary(forKey: kDLReadDeepLinkAfterLaunchApp) as? [String: Int]) ?? [:]
        
        // Ki·ªÉm tra xem deeplink n√†y ƒë√£ t·ª´ng ƒë∆∞·ª£c m·ªü ch∆∞a
        let previousCount = listDeepLinks[url.absoluteString] ?? 0
        let isFirstOpen = (previousCount == 0)
        
        // Ki·ªÉm tra xem app c√≥ b·ªã ƒë√≥ng ho√†n to√†n tr∆∞·ªõc khi m·ªü l·∫°i deeplink kh√¥ng
        let wasTerminated = DLUserDefaultHelper.shared.getBool(forKey: kDLAppWasTerminated)
        let isReopen = wasTerminated && !isFirstOpen
        
        // C·∫≠p nh·∫≠t s·ªë l·∫ßn m·ªü deeplink
        let newCount = previousCount + 1
        listDeepLinks[url.absoluteString] = newCount
        
        // ƒê·∫∑t tr·∫°ng th√°i app kh√¥ng b·ªã ƒë√≥ng ho√†n to√†n n·ªØa
        DLUserDefaultHelper.shared.setBool(false, forKey: kDLAppWasTerminated)
        
        // L∆∞u danh s√°ch deeplink ƒë√£ m·ªü v√†o UserDefaults
        DLUserDefaultHelper.shared.setDictionary(listDeepLinks as NSDictionary, forKey: kDLReadDeepLinkAfterLaunchApp)
        
        // Log th√¥ng tin
        if isFirstOpen {
            DLLogger.log("üöÄ First time opening deeplink: \(url.absoluteString)", level: .info)
        } else if isReopen {
            DLLogger.log("üîÑ Reopened deeplink after app was terminated: \(url.absoluteString)", level: .info)
        } else {
            DLLogger.log("üìä Deeplink opened again in same session: \(url.absoluteString) - \(newCount) times", level: .info)
        }
        
        // G·ª≠i API c·∫≠p nh·∫≠t th·ªëng k√™ l√™n server
        DLDynamicLinkNetworking.shared.updateDeepLinkAnalytics(url: url, count: newCount, firstOpen: isFirstOpen, reopen: isReopen) { (data, error) in
            if let error = error {
                DLLogger.log("‚ùå Failed to update deeplink stats: \(error.localizedDescription)", level: .error)
                return
            }
            guard let data = data else {
                DLLogger.log("‚ùå Data is nil", level: .error)
                return
            }
            DLLogger.log("‚úÖ Successfully updated deeplink stats: \(data.toJsonString())", level: .info)
        }
    }
}
