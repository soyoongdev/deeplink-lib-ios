// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DynamicLinkFramework
import CommonCrypto
@_exported import DynamicLinkFramework
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension Swift.String {
  public func base64DecodeString() -> Foundation.Data?
  public func base64DecodeStringToString() -> Swift.String?
  public func base64EncodeStringToString() -> Swift.String?
  public func sanitizedString() -> Swift.String
  public func urlEncodedString() -> Swift.String?
  public func stringByPercentDecodingString() -> Swift.String?
  public func stringByPercentEncodingStringForQuery() -> Swift.String?
  public func decodeJsonStringToDictionary() -> [Swift.String : Any]
  public func decodeQueryStringToDictionary() -> [Swift.String : Swift.String]
  public func dataFromHexString() -> Foundation.Data?
  public func wireFormatFromString() -> Swift.String
}
extension Swift.Optional where Wrapped == Swift.String {
  public func sha256Encode() -> Swift.String
}
@_inheritsConvenienceInitializers @objc public class DLUtilities : ObjectiveC.NSObject {
  @objc public static let shared: DynamicLinkFramework.DLUtilities
  @objc public static var DLCustomDomains: Swift.Set<Foundation.URL>
  @objc public func urlQueryStringFromDictionary(_ dictionary: [Swift.String : Swift.String]) -> Swift.String
  @objc public func dictionaryFromQuery(_ queryString: Swift.String?) -> [Swift.String : Swift.String]
  @objc public func isURLForAllowedCustomDomain(_ url: Foundation.URL?) -> Swift.Bool
  @objc public func isValidDLWithDomain(_ url: Foundation.URL?) -> Swift.Bool
  @objc public func canParseUniversalLinkURL(_ url: Foundation.URL?) -> Swift.Bool
  @objc public func matchesShortLinkFormat(_ url: Foundation.URL) -> Swift.Bool
  @objc public func addToAllowListForCustomDomainsArray(_ customDomains: [Swift.String])
  @objc public func checkForDeepLinkAfterLaunch(_ url: Foundation.URL)
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.Optional where Wrapped == Any {
  public func dateFromWireFormat() -> Foundation.Date?
  public func stringFromWireFormat() -> Swift.String?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DLDynamicLinks : ObjectiveC.NSObject {
  @objc public static let shared: DynamicLinkFramework.DLDynamicLinks
  @objc public func configureDynamicLinks()
  @objc public func createShortURL(from parameters: [Swift.String : Any], completion: @escaping (Foundation.Data?, (any Swift.Error)?) -> Swift.Void)
  @objc public func dynamicLinkFromCustomSchemeURL(_ url: Foundation.URL?) -> DynamicLinkFramework.DLDynamicLink?
  @objc public func handleUniversalLink(_ url: Foundation.URL?, completion: @escaping DynamicLinkFramework.DLDynamicLinkUniversalLinkHandler) -> Swift.Bool
  @objc deinit
}
extension Foundation.Data {
  public func base64EncodeData() -> Swift.String
  public func decodeJsonDataToDictionary() -> [Swift.String : Any]
  public func hexString() -> Swift.String
  public func parseJSON() -> [Swift.String : Any]?
}
public let kDLParameterDeepLinkIdentifier: Swift.String
public let kDLParameterInviteId: Swift.String
public let kDLParameterWeakMatchEndpoint: Swift.String
public let kDLParameterMinimumAppVersion: Swift.String
public let kDLParameterMatchType: Swift.String
public let kDLParameterMatchMessage: Swift.String
@_hasMissingDesignatedInitializers @objc public class DLDynamicLink : ObjectiveC.NSObject {
  final public let originalURL: Foundation.URL
  final public let host: Swift.String?
  final public let path: Swift.String
  final public let parameters: [Swift.String : Swift.String]
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension Swift.Dictionary where Key == Swift.String, Value == Any {
  public func encodeDictionaryToJsonData() -> Foundation.Data?
  public func encodeDictionaryToJsonString() -> Swift.String?
  public func encodeDictionaryToQueryString() -> Swift.String
  public func prettyPrintJSON() -> Swift.String?
}
extension Swift.Optional where Wrapped == [Swift.String : Any] {
  public func encodeDictionaryToJsonString() -> Swift.String?
}
extension Swift.Array where Element == Any {
  public func encodeArrayToJsonString() -> Swift.String
}
@objc public enum LogLevel : Swift.Int {
  case debug = 0
  case info
  case warning
  case error
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class DLLoggerConfig : ObjectiveC.NSObject {
  @objc public static var isLoggingEnabled: Swift.Bool
  @objc public static var shouldLogToFile: Swift.Bool
  @objc public static var shouldUseOSLog: Swift.Bool
  @objc public static var shouldUseNSLog: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DLLogger : ObjectiveC.NSObject {
  @objc public static func log(_ message: Swift.String, level: DynamicLinkFramework.LogLevel = .info, function: Swift.String = #function, file: Swift.String = #file, line: Swift.Int = #line)
  @objc public static func clearLogFile()
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.Encodable {
  public func toJsonString() -> Swift.String
}
@_inheritsConvenienceInitializers @objc public class DLConfig : ObjectiveC.NSObject {
  public static var allowedHosts: [Swift.String]
  public static var appSchemes: [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.Bool {
  public func wireFormatFromBool() -> Foundation.NSNumber?
}
public typealias DLDynamicLinkResolverHandler = (Foundation.URL?, (any Swift.Error)?) -> Swift.Void
public typealias DLDynamicLinkUniversalLinkHandler = (DynamicLinkFramework.DLDynamicLink?, (any Swift.Error)?) -> Swift.Void
public typealias DLDynamicLinkResultHandler = (Foundation.Data?, (any Swift.Error)?) -> Swift.Void
extension Foundation.Date {
  public func iso8601StringFromDate() -> Swift.String
  public func wireFormatFromDate() -> Foundation.NSNumber?
}
extension Swift.Optional where Wrapped == Foundation.URL {
  public func queryItems() -> [DynamicLinkFramework.DLKeyValue]
}
@_inheritsConvenienceInitializers @objc public class DLKeyValue : ObjectiveC.NSObject {
  @objc public var key: Swift.String?
  @objc public var value: Swift.String?
  @objc public static func key(_ key: Swift.String, value: Swift.String) -> DynamicLinkFramework.DLKeyValue
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DLUserDefaultHelper : ObjectiveC.NSObject {
  @objc public static let shared: DynamicLinkFramework.DLUserDefaultHelper
  @objc public func setString(_ value: Swift.String, forKey key: Swift.String)
  @objc public func getString(forKey key: Swift.String) -> Swift.String?
  @objc public func setInt(_ value: Swift.Int, forKey key: Swift.String)
  @objc public func getInt(forKey key: Swift.String) -> Swift.Int
  @objc public func setBool(_ value: Swift.Bool, forKey key: Swift.String)
  @objc public func getBool(forKey key: Swift.String) -> Swift.Bool
  @objc public func setDictionary(_ value: Foundation.NSDictionary, forKey key: Swift.String)
  @objc public func getDictionary(forKey key: Swift.String) -> Foundation.NSDictionary?
  @objc public func remove(forKey key: Swift.String)
  @objc public func containsKey(_ key: Swift.String) -> Swift.Bool
  @objc public func removeAllKeys()
  @objc override dynamic public init()
  @objc deinit
}
public let DL_PRE_LAST_DYNAMICLINK: Swift.String
public let kDLReadDeepLinkAfterLaunchApp: Swift.String
public let kDLAppWasTerminated: Swift.String
public let kInfoPlistCustomDomainsKey: Swift.String
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DLAPIClient : ObjectiveC.NSObject {
  @objc public static let shared: DynamicLinkFramework.DLAPIClient
  @objc public func request(endpoint: Swift.String, method: Swift.String = "GET", parameters: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, completion: @escaping DynamicLinkFramework.DLDynamicLinkResultHandler)
  @objc public func get(endpoint: Swift.String, parameters: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, completion: @escaping DynamicLinkFramework.DLDynamicLinkResultHandler)
  @objc public func post(endpoint: Swift.String, parameters: [Swift.String : Any], headers: [Swift.String : Swift.String]? = nil, completion: @escaping DynamicLinkFramework.DLDynamicLinkResultHandler)
  @objc public func put(endpoint: Swift.String, parameters: [Swift.String : Any], headers: [Swift.String : Swift.String]? = nil, completion: @escaping DynamicLinkFramework.DLDynamicLinkResultHandler)
  @objc public func delete(endpoint: Swift.String, parameters: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, completion: @escaping DynamicLinkFramework.DLDynamicLinkResultHandler)
  @objc deinit
}
public let apiURL: Swift.String
public let kResolvedLinkDeepLinkURLKey: Swift.String
public let kResolvedLinkMinAppVersionKey: Swift.String
public let kAnalyticsDataSourceKey: Swift.String
public let kAnalyticsDataMediumKey: Swift.String
public let kAnalyticsDataCampaignKey: Swift.String
public let kAnalyticsDataTermKey: Swift.String
public let kAnalyticsDataContentKey: Swift.String
public let kHeaderIosBundleIdentifier: Swift.String
public let kGenericErrorDomain: Swift.String
public enum DLShortURLType : Swift.Int {
  case unlimitedUse
  case oneTimeUse
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class DLDynamicLinkNetworking : ObjectiveC.NSObject {
  public static let shared: DynamicLinkFramework.DLDynamicLinkNetworking
  @objc public func extractErrorForShortLink(url: Foundation.URL, data: Foundation.Data?, response: Foundation.URLResponse?, error: (any Swift.Error)?) -> (any Swift.Error)?
  @objc public func resolveShortLink(url: Foundation.URL?, completion: @escaping DynamicLinkFramework.DLDynamicLinkResolverHandler)
  @objc public func createShortURLFakeResponse(from parameters: [Swift.String : Any], completion: @escaping DynamicLinkFramework.DLDynamicLinkResultHandler)
  @objc public func createShortURL(from parameters: [Swift.String : Any], completion: @escaping DynamicLinkFramework.DLDynamicLinkResultHandler)
  @objc public func updateDeepLinkAnalytics(url: Foundation.URL, count: Swift.Int, firstOpen: Swift.Bool, reopen: Swift.Bool, completion: @escaping DynamicLinkFramework.DLDynamicLinkResultHandler)
  @objc override dynamic public init()
  @objc deinit
}
extension ObjectiveC.NSObject {
  public func synchronized<T>(_ block: () -> T) -> T
  public func dispatchOnce(block: () -> Swift.Void)
}
extension DynamicLinkFramework.LogLevel : Swift.Equatable {}
extension DynamicLinkFramework.LogLevel : Swift.Hashable {}
extension DynamicLinkFramework.LogLevel : Swift.RawRepresentable {}
extension DynamicLinkFramework.DLShortURLType : Swift.Equatable {}
extension DynamicLinkFramework.DLShortURLType : Swift.Hashable {}
extension DynamicLinkFramework.DLShortURLType : Swift.RawRepresentable {}
